; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march upt -verify-machineinstrs -show-mc-encoding <  %s \
; RUN:   | FileCheck %s --check-prefix=MEM



; =======check load and store given address
define i32 @lw(i32 *%a) nounwind {
; MEN-LABEL: lw:
; MEN:       # %bb.0:
; MEN-NEXT:    lw a1, 12(a0)
; MEN-NEXT:    lw a0, 0(a0)
; MEN-NEXT:    mv a0, a1
; MEN-NEXT:    ret
  %1 = getelementptr i32, i32* %a, i32 3
  %2 = load i32, i32* %1
  %3 = load volatile i32, i32* %a
  ret i32 %2
}

define void @sw(i32 *%a, i32 %b) nounwind {
; MEN-LABEL: sw:
; MEN:       # %bb.0:
; MEN-NEXT:    sw a1, 0(a0)
; MEN-NEXT:    sw a1, 32(a0)
; MEN-NEXT:    ret
  store i32 %b, i32* %a
  %1 = getelementptr i32, i32* %a, i32 8
  store i32 %b, i32* %1
  ret void
}


; ========Check load and store to a global
@G = global i32 0

define i32 @lw_sw_global(i32 %a) nounwind {
; MEN-LABEL: lw_sw_global:
; MEN:       # %bb.0:
; MEN-NEXT:    lui a2, %hi(G)
; MEN-NEXT:    lw a1, %lo(G)(a2)
; MEN-NEXT:    sw a0, %lo(G)(a2)
; MEN-NEXT:    addi a2, a2, %lo(G)
; MEN-NEXT:    lw a3, 36(a2)
; MEN-NEXT:    sw a0, 36(a2)
; MEN-NEXT:    mv a0, a1
; MEN-NEXT:    ret
  %1 = load volatile i32, i32* @G
  store i32 %a, i32* @G
  %2 = getelementptr i32, i32* @G, i32 9
  %3 = load volatile i32, i32* %2
  store i32 %a, i32* %2
  ret i32 %1
}

; ====== Ensure that 1 is added to the high 20 bits if bit 11 of the low part is 1
define i32 @lw_sw_constant(i32 %a) nounwind {
; MEN-LABEL: lw_sw_constant:
; MEN:       # %bb.0:
; MEN-NEXT:    lui a2, 912092
; MEN-NEXT:    lw a1, -273(a2)
; MEN-NEXT:    sw a0, -273(a2)
; MEN-NEXT:    mv a0, a1
; MEN-NEXT:    ret
  %1 = inttoptr i32 3735928559 to i32*
  %2 = load volatile i32, i32* %1
  store i32 %a, i32* %1
  ret i32 %2
}