//===-- UPTSubtarget.h - Define Subtarget for the UPT -------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the UPT specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LIB_TARGET_UPT_UPTSUBTARGET_H
#define LIB_TARGET_UPT_UPTSUBTARGET_H

#include "UPT.h"
#include "UPTFrameLowering.h"
#include "UPTISelLowering.h"
#include "UPTInstrInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "UPTGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class UPTSubtarget : public UPTGenSubtargetInfo {
private:
  virtual void anchor();
  bool HasStdExtM = false;
  bool UseSoftMulDiv = false;

  UPTInstrInfo InstrInfo;
  UPTTargetLowering TLInfo;
  UPTFrameLowering FrameLowering;
  UPTRegisterInfo RegInfo;

protected:
//  !Todo GlobalISel related fields.
//  std::unique_ptr<CallLowering> CallLoweringInfo;
//  std::unique_ptr<InstructionSelector> InstSelector;
//  std::unique_ptr<UPTalizerInfo> UPTalizer;
//  std::unique_ptr<RegisterBankInfo> RegBankInfo;

public:
  /// This constructor initializes the data members to match that of the specified triple
  UPTSubtarget(const Triple &TT, StringRef CPU, StringRef FS, UPTTargetMachine &TM);

  // ParseSubtargetFeatures - Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  UPTSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

  // Interfaces to the major aspects of target machine information:
  // -- Instruction opcode and operand information
  // -- Pipelines and scheduling information
  // -- Stack frame information
  // -- Selection DAG lowering information
  // -- Call lowering information
  const UPTInstrInfo *getInstrInfo() const override {
    return &InstrInfo;
  }
  const UPTRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const UPTTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const UPTFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  bool hasStdExtM() const { return HasStdExtM; }
  bool useSoftMulDiv() const { return UseSoftMulDiv; }
};
} // End llvm namespace

#endif

