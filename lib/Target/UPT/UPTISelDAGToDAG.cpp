//===-- UPTISelDAGToDAG.cpp - A dag to dag inst selector for UPT ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the UPT target.
//
//===----------------------------------------------------------------------===//

#include "UPT.h"
#include "UPTTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

#include "UPTInstrInfo.h"

using namespace llvm;

#define DEBUG_TYPE "upt-isel"
/// UPTDAGToDAGISel - UPT specific code to select UPT machine instructions for SelectionDAG operations.
namespace {
class UPTDAGToDAGISel : public SelectionDAGISel {
  // Keep a pointer to the UPTSubtarget around so that we can
  // make the right decision when generating code for different targets.
  const UPTSubtarget &Subtarget;

public:
  explicit UPTDAGToDAGISel(UPTTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel), Subtarget(*TM.getSubtargetImpl()) {}

  void Select(SDNode *N) override;

  bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset);


private:
  bool SelectMoveImmediate(SDNode *N);
  bool SelectConditionalBranch(SDNode *N);
  inline SDValue getI32Imm(unsigned Imm, const SDLoc &dl) {
    return CurDAG->getTargetConstant(Imm, dl, MVT::i32);
  }

// Include the pieces autogenerated from the target description.
#include "UPTGenDAGISel.inc"
};
} // end anonymous namespace



/// ComplexPattern used by UPT Load/Store instructions
bool UPTDAGToDAGISel::SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset) {
  // if Address is FI, get the TargetFrameIndex. eg: LDR V0, [FrameIndex,4]
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    EVT PtrVT = getTargetLowering()->getPointerTy(CurDAG->getDataLayout());
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), PtrVT);
    Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
    return true;
  }
  // if op is not load/store, there is no lower operation
  if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
      Addr.getOpcode() == ISD::TargetGlobalAddress ||
      Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
    return false; // direct calls.
  }
  // Addresses of the form Addr+const,eg: LDR V0, [A0]
  Base = Addr;
  Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
  return true;
}

bool UPTDAGToDAGISel::SelectMoveImmediate(SDNode *N) {
  // Make sure the immediate size is supported.
  const ConstantSDNode *ConstVal = cast<ConstantSDNode>(N);
  uint64_t ImmVal = ConstVal->getZExtValue();
  uint64_t SupportedMask = 0xfffffffff;
  if ((ImmVal & SupportedMask) != ImmVal) {
    return false;
  }

  // Select the low part of the immediate move.
  uint64_t LoMask = 0xffff;
  uint64_t HiMask = 0xffff0000;
  uint64_t ImmLo = (ImmVal & LoMask);
  uint64_t ImmHi = (ImmVal & HiMask);
  SDValue ConstLo = CurDAG->getTargetConstant(ImmLo, N, MVT::i32);
  MachineSDNode *Move =
      CurDAG->getMachineNode(UPT::MOVLOi16, N, MVT::i32, ConstLo);

  // Select the low part of the immediate move, if needed.
  if (ImmHi) {
    SDValue ConstHi = CurDAG->getTargetConstant(ImmHi >> 16, N, MVT::i32);
    Move = CurDAG->getMachineNode(UPT::MOVHIi16, N, MVT::i32, SDValue(Move, 0),
                                  ConstHi);
  }
  ReplaceNode(N, Move);

  return true;
}

bool UPTDAGToDAGISel::SelectConditionalBranch(SDNode *N) {
  SDValue Chain = N->getOperand(0);
  SDValue Cond = N->getOperand(1);
  SDValue LHS = N->getOperand(2);
  SDValue RHS = N->getOperand(3);
  SDValue Target = N->getOperand(4);

  // Generate a comparison instruction.
  EVT CompareTys[] = {MVT::Other, MVT::Glue};
  SDVTList CompareVT = CurDAG->getVTList(CompareTys);
  SDValue CompareOps[] = {LHS, RHS, Chain};
  SDNode *Compare = CurDAG->getMachineNode(UPT::CMP, N, CompareVT, CompareOps);

  // Generate a predicated branch instruction.
  const CondCodeSDNode *CC = cast<CondCodeSDNode>(Cond.getNode());
  SDValue CCVal = CurDAG->getTargetConstant(CC->get(), N, MVT::i32);
  SDValue BranchOps[] = {CCVal, Target, SDValue(Compare, 0),
                         SDValue(Compare, 1)};
  ReplaceNode(N, CurDAG->getMachineNode(UPT::Bcc, N, MVT::Other, BranchOps));

  return true;
}

void UPTDAGToDAGISel::Select(SDNode *N) {
  LLVM_DEBUG(outs() << "Selecting: "; N->dump(CurDAG); outs() << "\n");

  switch (N->getOpcode()) {
  default:
    break;
  case ISD::Constant:
    if (SelectMoveImmediate(N))
      return;
    break;
  case ISD::BR_CC:
    if (SelectConditionalBranch(N))
      return;
//  case ISD::BRIND:
//    if (SelectBrind(N)) return;
    break;
  }
  // Other cases are autogenerated.
  SelectCode(N);
}

/// createUPTISelDag - This pass converts a legalized DAG into a UPT-specific DAG, ready for instruction scheduling.
FunctionPass *llvm::createUPTISelDag(UPTTargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new UPTDAGToDAGISel(TM, OptLevel);
}
